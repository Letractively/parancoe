<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2006-2012 The Parancoe Team <info@parancoe.org>

    This file is part of Parancoe Plugin Spring Security Evolution.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
             xmlns:security="http://www.springframework.org/schema/security"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:lambico="http://www.lambico.org/schema/lambico"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.lambico.org/schema/lambico http://www.lambico.org/schema/lambico.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/security 	http://www.springframework.org/schema/security/spring-security-3.1.xsd">


    <!-- Automatic discovering of persistent classes -->
    <lambico:discover-persistent-classes basePackage="org.parancoe.plugins.securityevolution"/>
    <!-- Automatic DAO definition from persistent classes -->
    <lambico:define-daos baseInterfacePackage="org.parancoe.plugins.securityevolution"/>
    
    <!-- Automatic discovering of components -->
    <context:component-scan base-package="org.parancoe.plugins.securityevolution"/>
    
<!--  
   
     BEGIN Security configuration.
     This configuration is based on the dogstore-explicit-base.xml configuration file
     available at http://www.packtpub.com/support?nid=4435 - www.springsecuritybook.com
     Book: Spring Security 3 - Peter Mularien
     
-->
    
<!-- 
      Plugin properties which are very likely to be overridden. 
      web-app can override  one or more of the following values in the application configuration file: WEB-INF\applicationContext.xml 
      Name is meaningful so no comment is needed 
-->
    
    
     <bean id="filterUrlLogout" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="/logout.html"/>
	</bean>
	
	 <bean id="loginView" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="/plugin/security/login"/>
	</bean>
	
	<bean id="accessDeniedView" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="/plugin/security/accessDenied"/>
	</bean>
	
	<!-- This keyString should be overridden by your application. This value is shared between  rememberMeServices and rememberMeAuthenticationProvider, so these two need to have the same value for 'key'-->
	<bean id="keyString" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="parancoeKey"/>
	</bean>
	
	<bean id="logoutSuccessUrl" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="/"/>
	</bean>
	
	<bean id="defaultFailureUrl" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="/plugin/security/login.html?login_error=1"/>
	</bean>
	
	<bean id="loginFormUrl" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="/plugin/security/login.html"/>
	</bean>
	
	<bean id="accessDeniedUrl" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="/plugin/security/accessDenied.html"/>
	</bean>
	<!-- The URL destination that this filter intercepts and processes -->
	<bean id="filterProcessesUrl" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="/plugin/security/j_spring_security_check"/>
	</bean>
	
	
	
	<bean id="tokenKey" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="ASGDADAG7625SGSG"/>
	</bean>
	
	   
    
   
<!-- 
      Filters definition. The commas are required in the filter-chain "filters" attribute!
-->   
 
	<bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
	  <security:filter-chain-map path-type="ant">
	     <security:filter-chain pattern="/**" filters="
	           securityContextPersistenceFilter,
	           logoutFilter,
	           usernamePasswordProcessingFilter,
	           rememberMeProcessingFilter,
	           anonymousProcessingFilter,
	           exceptionTranslationFilter,
	           filterSecurityInterceptor" />
	  </security:filter-chain-map>
	</bean>
	
	<bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter"/>
	
	<!-- Note the construction of the logout filter differs from most others -->
	<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<!-- the post-logout destination -->
		<constructor-arg ref="logoutSuccessUrl"/>
		
 		<constructor-arg>
			<array>
				<ref bean="logoutHandler"/>
				<ref bean="rememberMeServices"/>
			</array>
		</constructor-arg>
		<property name="filterProcessesUrl" ref="filterUrlLogout"/>
	</bean>
	
   
	
	<bean id="usernamePasswordProcessingFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
	 <property name="filterProcessesUrl" ref="filterProcessesUrl" />
	  <!--  
      
 	  <property name="usernameParameter" value="login_username"/>
	  <property name="passwordParameter" value="login_password"/> 
      -->
	  <property name="authenticationManager" ref="customAuthenticationManager"/>
	  <property name="rememberMeServices" ref="rememberMeServices"/>
	  <property name="authenticationFailureHandler" ref="authenticationFailureHandler"/>
	</bean>
	
	<bean id="rememberMeProcessingFilter" class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
	  <property name="rememberMeServices" ref="rememberMeServices"/>
	  <property name="authenticationManager" ref="customAuthenticationManager" />
	</bean>
	
	<bean id="anonymousProcessingFilter" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
	<!-- Both of these are required -->
		<!-- username, default role -->
		<property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS"/>
		<!-- randomly generated key -->
		<property name="key" ref="tokenKey"/>
	</bean>
	
	<bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
	  <property name="authenticationEntryPoint" ref="authenticationEntryPoint"/>
	  <property name="accessDeniedHandler" ref="accessDeniedHandler"/>
	</bean>
	
	<bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
	  <property name="authenticationManager" ref="customAuthenticationManager"/>
	  <property name="accessDecisionManager" ref="affirmativeBased"/>
	  <property name="securityMetadataSource" ref="securityMetadataSource"/>	  
	</bean>
	
	
	
<!-- 
      Handlers and beans needed by the filters.
-->   
	
	<!-- This section will be overridden at application level (webapp using the plugin)-->
	<security:filter-security-metadata-source
		id="securityMetadataSource" use-expressions="true">
		<security:intercept-url pattern="/admin/**"
			access="hasRole('ROLE_ADMIN')" />
	</security:filter-security-metadata-source> 
	
	<bean id="logoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>	
	
	<bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices">
		<property name="key" ref="keyString"/>		
		<property name="userDetailsService" ref="userDetailsService"/>
	</bean>
	
	 <!-- Custom parancoe implementation of the UserDetailsService interface -->
	 <bean id="userDetailsService" class="org.parancoe.plugins.securityevolution.ParancoeUserDetailsService"/>
	 
	 <bean id="customAuthenticationManager" class="org.springframework.security.authentication.ProviderManager">		
		<property name="providers">
			<list>
				<ref  bean="authenticationProvider"/>
				<ref  bean="rememberMeAuthenticationProvider"/>
			</list>
		</property>
	</bean>
	
	<bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="passwordEncoder" ref="passwordEncoder"/>
		<property name="saltSource" ref="saltSource"/>
		<property name="userDetailsService" ref="userDetailsService"/>
	</bean>    
	
	<bean class="org.springframework.security.authentication.dao.ReflectionSaltSource" id="saltSource">
          <property name="userPropertyToUse" value="getUsername"/>                
     </bean>
     
     <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder" />
     
     <bean id="rememberMeAuthenticationProvider" class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
	  	<property name="key" ref="keyString"/>
	</bean>	
	
	<bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="defaultFailureUrl"  ref="defaultFailureUrl"/>
	</bean>	
	
	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
	  <property name="loginFormUrl" ref="loginFormUrl" />
	</bean>
	
	<bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
	  <property name="errorPage" ref="accessDeniedUrl" />
	</bean>	
		
	<bean class="org.springframework.security.access.vote.AffirmativeBased" id="affirmativeBased">
		<property name="decisionVoters">
			<list>
				<ref bean="roleVoter"/>
				<ref bean="expressionVoter"/>
				<ref bean="authenticatedVoter"/>
			</list>
		</property>
	</bean>
	
	<bean class="org.springframework.security.access.vote.RoleVoter" id="roleVoter"/>
	
	<bean class="org.springframework.security.access.vote.AuthenticatedVoter" id="authenticatedVoter"/>

	<!-- Used for expressions -->
	<bean class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" id="expressionHandler"/>
	<bean class="org.springframework.security.web.access.expression.WebExpressionVoter" id="expressionVoter">		
		<property name="expressionHandler" ref="expressionHandler"/>		
	</bean>	
    
<!--  
   
     END - Security configuration 
     
-->
    

   

<!--                           
    Plugin configuration in accordance with the parancoe plugins architecture
-->
    <bean id="applicationContextPluginSpringSecurityEvolutionConfig" class="org.parancoe.web.plugin.ApplicationContextPlugin">
        <property name="name" value="parancoe-plugin-springsecurity-evoulution"/>
        <property name="contextLoaderListeners">
            <list>
                <ref bean="parancoe-plugin-springsecurity-evolution-InitializerContextListener"/>
            </list>
        </property>
        
        <!-- fixtures to load at plugin startup -->
         <property name="fixtureClassNames">
            <list/>            
        </property> 
        
        <property name="jspPrefix" value="/WEB-INF/jsp"/>
        
        <property name="jspResources">
            <list>
                <bean class="java.lang.String"><constructor-arg value="classpath:#{applicationContextPluginSpringSecurityEvolutionConfig.jspPrefix}/plugin/security/*"/></bean>
            </list>
        </property>
        
    </bean>
    


    
</beans>
