<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2006-2012 The Parancoe Team <info@parancoe.org>

    This file is part of Parancoe Plugin Spring Security Evolution.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns:="http://www.springframework.org/schema/beans"
             xmlns:security="http://www.springframework.org/schema/security"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:lambico="http://www.lambico.org/schema/lambico"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.lambico.org/schema/lambico http://www.lambico.org/schema/lambico.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/security 	http://www.springframework.org/schema/security/spring-security-3.1.xsd">


    <!-- Authomatic discovering of persistent classes -->
    <lambico:discover-persistent-classes basePackage="org.parancoe.plugins.securityevolution"/>
    <!-- Authomatic DAO definition from persistent classes -->
    <lambico:define-daos baseInterfacePackage="org.parancoe.plugins.securityevolution"/>
    
    
    
    <!-- Security configuration -->
    
    <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder" />
    
    <bean class="org.springframework.security.authentication.dao.ReflectionSaltSource" id="saltSource">
                <property name="userPropertyToUse" value="getUsername"/>
     </bean>
     
    <bean id="userDetailsService" class="org.parancoe.plugins.securityevolution.ParancoeUserDetailsService"/>
    

    <!--    
     <security:http auto-config="true"    pattern="/admin/**" use-expressions="true" access-decision-manager-ref="accessDecisionManager" >
        <security:intercept-url pattern="/admin/**"  access="hasRole('ROLE_ADMIN')"/>
    </security:http>   
    -->
    
    <!-- custom authentication for openId -->
    <bean id="openIDUserService" class="org.parancoe.plugins.securityevolution.ParancoeOpenIDUserDetailsService" />

    
    
  
  
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider user-service-ref = "userDetailsService" >
        	<security:password-encoder ref="passwordEncoder">
        		<security:salt-source ref="saltSource" />
        	</security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>

    <bean class="org.springframework.security.access.vote.UnanimousBased" id="accessDecisionManager">
		<property name="decisionVoters">
			<list>
				<ref bean="webExpressionVoter"/>				
			</list>
		</property>
	</bean>
	<bean id="webExpressionVoter" class="org.springframework.security.web.access.expression.WebExpressionVoter" />
    
    
    

   

    <!--                           -->
    <!-- plugin configuration -->
    <!--                           -->

    <!-- ContextListener specifico per questo plugin -->
    <bean id="pluginSecurityContextListener" class="org.parancoe.plugins.securityevolution.PopulateData"/>


    <bean id="applicationContextpluginSecurityEvolutionConfig" class="org.parancoe.web.plugin.ApplicationContextPlugin">
        <property name="name" value="parancoe-plugin-spingsecurityevolution"/>
        <property name="contextLoaderListeners">
            <list>
                <ref bean="pluginSecurityContextListener"/>
            </list>
        </property>
    </bean>


    
</beans>
